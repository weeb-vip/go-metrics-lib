// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weeb-vip/go-metrics-lib (interfaces: MetricsImpl)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/metrics_impl.go -package=mocks github.com/weeb-vip/go-metrics-lib MetricsImpl
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	metrics_lib "github.com/weeb-vip/go-metrics-lib"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsImpl is a mock of MetricsImpl interface.
type MockMetricsImpl struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsImplMockRecorder
	isgomock struct{}
}

// MockMetricsImplMockRecorder is the mock recorder for MockMetricsImpl.
type MockMetricsImplMockRecorder struct {
	mock *MockMetricsImpl
}

// NewMockMetricsImpl creates a new mock instance.
func NewMockMetricsImpl(ctrl *gomock.Controller) *MockMetricsImpl {
	mock := &MockMetricsImpl{ctrl: ctrl}
	mock.recorder = &MockMetricsImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsImpl) EXPECT() *MockMetricsImplMockRecorder {
	return m.recorder
}

// ApiMetric mocks base method.
func (m *MockMetricsImpl) ApiMetric(value float64, labels metrics_lib.ApiMetricLabels) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiMetric", value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiMetric indicates an expected call of ApiMetric.
func (mr *MockMetricsImplMockRecorder) ApiMetric(value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiMetric", reflect.TypeOf((*MockMetricsImpl)(nil).ApiMetric), value, labels)
}

// CallMetric mocks base method.
func (m *MockMetricsImpl) CallMetric(value float64, labels metrics_lib.CallMetricLabels) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallMetric", value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallMetric indicates an expected call of CallMetric.
func (mr *MockMetricsImplMockRecorder) CallMetric(value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallMetric", reflect.TypeOf((*MockMetricsImpl)(nil).CallMetric), value, labels)
}

// CountMetric mocks base method.
func (m *MockMetricsImpl) CountMetric(name string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMetric", name, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountMetric indicates an expected call of CountMetric.
func (mr *MockMetricsImplMockRecorder) CountMetric(name, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMetric", reflect.TypeOf((*MockMetricsImpl)(nil).CountMetric), name, labels)
}

// DatabaseMetric mocks base method.
func (m *MockMetricsImpl) DatabaseMetric(value float64, labels metrics_lib.DatabaseMetricLabels) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseMetric", value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseMetric indicates an expected call of DatabaseMetric.
func (mr *MockMetricsImplMockRecorder) DatabaseMetric(value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseMetric", reflect.TypeOf((*MockMetricsImpl)(nil).DatabaseMetric), value, labels)
}

// GaugeMetric mocks base method.
func (m *MockMetricsImpl) GaugeMetric(name string, value float64, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeMetric", name, value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// GaugeMetric indicates an expected call of GaugeMetric.
func (mr *MockMetricsImplMockRecorder) GaugeMetric(name, value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeMetric", reflect.TypeOf((*MockMetricsImpl)(nil).GaugeMetric), name, value, labels)
}

// HistogramMetric mocks base method.
func (m *MockMetricsImpl) HistogramMetric(name string, value float64, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistogramMetric", name, value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// HistogramMetric indicates an expected call of HistogramMetric.
func (mr *MockMetricsImplMockRecorder) HistogramMetric(name, value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistogramMetric", reflect.TypeOf((*MockMetricsImpl)(nil).HistogramMetric), name, value, labels)
}

// HttpMiddlewareMetric mocks base method.
func (m *MockMetricsImpl) HttpMiddlewareMetric(config metrics_lib.HttpMiddlewareMetricConfig) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpMiddlewareMetric", config)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// HttpMiddlewareMetric indicates an expected call of HttpMiddlewareMetric.
func (mr *MockMetricsImplMockRecorder) HttpMiddlewareMetric(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpMiddlewareMetric", reflect.TypeOf((*MockMetricsImpl)(nil).HttpMiddlewareMetric), config)
}

// ResolverMetric mocks base method.
func (m *MockMetricsImpl) ResolverMetric(value float64, labels metrics_lib.ResolverMetricLabels) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolverMetric", value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolverMetric indicates an expected call of ResolverMetric.
func (mr *MockMetricsImplMockRecorder) ResolverMetric(value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolverMetric", reflect.TypeOf((*MockMetricsImpl)(nil).ResolverMetric), value, labels)
}

// SummaryMetric mocks base method.
func (m *MockMetricsImpl) SummaryMetric(name string, value float64, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryMetric", name, value, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// SummaryMetric indicates an expected call of SummaryMetric.
func (mr *MockMetricsImplMockRecorder) SummaryMetric(name, value, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryMetric", reflect.TypeOf((*MockMetricsImpl)(nil).SummaryMetric), name, value, labels)
}
